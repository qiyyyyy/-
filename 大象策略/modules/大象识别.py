#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
大象识别模块 - 识别盘口中的大额买单和卖单
"""
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime

from .日志 import get_logger

class 大象识别器:
    """大象识别器类，用于识别盘口中的大单买盘和卖盘"""
    
    def __init__(
        self, 
        大象委托量阈值: float = 1000000.0, 
        大象价差阈值: int = 3, 
        确认次数: int = 3,
        大象稳定时间: int = 5,
        启用卖单识别: bool = True,
        卖单委托量阈值: float = 1200000.0,
        卖单价差阈值: int = 3,
        跳过买一价: bool = False,
        远距大象委托量倍数: float = 1.5,
        价差分界点: int = 1,
    ):
        """
        初始化大象识别器
        
        参数:
            大象委托量阈值: 判定为买单大象的最小委托量(元)
            大象价差阈值: 买单大象与卖一价的最大档位数量
            确认次数: 确认大象存在的检测次数
            大象稳定时间: 大象稳定存在的最小秒数
            启用卖单识别: 是否启用卖单大象识别
            卖单委托量阈值: 判定为卖单大象的最小委托量(元)
            卖单价差阈值: 卖单大象与买一价的最大档位数量
            跳过买一价: 是否跳过买一价搜索大象
            远距大象委托量倍数: 远距大象委托量阈值倍数
            价差分界点: 近距和远距大象的档位分界点
        """
        self.大象委托量阈值 = 大象委托量阈值
        self.大象价差阈值 = 大象价差阈值
        self.确认次数 = 确认次数
        self.大象稳定时间 = 大象稳定时间
        self.启用卖单识别 = 启用卖单识别
        self.卖单委托量阈值 = 卖单委托量阈值
        self.卖单价差阈值 = 卖单价差阈值
        self.跳过买一价 = 跳过买一价
        self.远距大象委托量倍数 = 远距大象委托量倍数
        self.价差分界点 = 价差分界点
        
        # 大象跟踪记录
        self.大象跟踪 = {}
        self.卖单大象跟踪 = {}
        
        # 日志记录器
        self.logger = get_logger("大象识别器")
    
    def 检测大象(self, 股票代码: str, 时间戳: int, 买盘: list, 卖盘: list, 最新价: float = None) -> dict:
        """检测大象订单
        
        参数:
            股票代码: 股票代码
            时间戳: 当前时间戳
            买盘: 买盘深度数据, 格式 [(价格, 数量), ...]
            卖盘: 卖盘深度数据, 格式 [(价格, 数量), ...]
            最新价: 最新成交价格
            
        返回:
            大象信息字典或None
        """
        if not 买盘 or not 卖盘:
            return None
            
        卖一价 = 卖盘[0][0]
        
        # 确定扫描起始索引
        起始索引 = 1 if self.跳过买一价 else 0
        
        # 遍历买盘寻找大象
        for i in range(起始索引, len(买盘)):
            买单价格 = 买盘[i][0]
            买单数量 = 买盘[i][1]
            
            # 使用档位数量作为价差
            档位数 = i
            
            # 超出最大档位数量，提前终止扫描
            if 档位数 > self.大象价差阈值:
                break
                
            # 根据档位确定委托量阈值
            委托量阈值 = self.大象委托量阈值
            if 档位数 > self.价差分界点:
                委托量阈值 *= self.远距大象委托量倍数
                
            # 计算委托金额
            委托金额 = 买单价格 * 买单数量 * 100
            
            # 检查是否满足大象条件
            if 委托金额 >= 委托量阈值 and 档位数 <= self.大象价差阈值:
                # 符合大象定义
                大象ID = f"{股票代码}_{买单价格}"
                
                if 大象ID not in self.大象跟踪:
                    # 新发现的大象
                    self.大象跟踪[大象ID] = {
                        "股票代码": 股票代码,
                        "价格": 买单价格,
                        "数量": 买单数量,
                        "委托金额": 委托金额,
                        "档位数": 档位数,
                        "深度位置": i,
                        "首次发现时间": 时间戳,
                        "最后更新时间": 时间戳,
                        "确认次数": 1,
                        "类型": "买单大象"
                    }
                    self.logger.debug(f"发现疑似大象: {股票代码} 价格:{买单价格} 数量:{买单数量} 委托金额:{委托金额} 档位:{档位数}")
                else:
                    # 已经在跟踪的大象
                    大象 = self.大象跟踪[大象ID]
                    大象["数量"] = 买单数量
                    大象["委托金额"] = 委托金额
                    大象["档位数"] = 档位数
                    大象["深度位置"] = i
                    大象["最后更新时间"] = 时间戳
                    大象["确认次数"] += 1
                    
                    # 检查是否已经稳定存在足够长时间
                    存在时长 = (时间戳 - 大象["首次发现时间"]) / 1000  # 转为秒
                    
                    if 大象["确认次数"] >= self.确认次数 and 存在时长 >= self.大象稳定时间:
                        # 确认为大象
                        self.logger.info(f"确认大象: {股票代码} 价格:{买单价格} 数量:{买单数量} 委托金额:{委托金额} 档位:{档位数} 确认次数:{大象['确认次数']} 存在时长:{存在时长}秒")
                        return 大象
                        
                # 找到一个符合条件的大象后就停止扫描
                break
                
        # 清理过期的大象跟踪记录
        self._清理过期大象(时间戳)
        
        return None
    
    def 检测卖单大象(self, 股票代码: str, 时间戳: int, 买盘: list, 卖盘: list, 最新价: float = None) -> dict:
        """检测卖单大象订单
        
        参数:
            股票代码: 股票代码
            时间戳: 当前时间戳
            买盘: 买盘深度数据, 格式 [(价格, 数量), ...]
            卖盘: 卖盘深度数据, 格式 [(价格, 数量), ...]
            最新价: 最新成交价格
            
        返回:
            卖单大象信息字典或None
        """
        if not self.启用卖单识别 or not 买盘 or not 卖盘:
            return None
            
        买一价 = 买盘[0][0]
        
        # 遍历卖盘寻找卖单大象(不跳过卖一价)
        for i in range(len(卖盘)):
            卖单价格 = 卖盘[i][0]
            卖单数量 = 卖盘[i][1]
            
            # 使用档位数量作为价差
            档位数 = i
            
            # 超出最大档位数量，提前终止扫描
            if 档位数 > self.卖单价差阈值:
                break
                
            # 根据档位确定委托量阈值
            委托量阈值 = self.卖单委托量阈值
            if 档位数 > self.价差分界点:
                委托量阈值 *= self.远距大象委托量倍数
                
            # 计算委托金额
            委托金额 = 卖单价格 * 卖单数量 * 100
            
            # 检查是否满足卖单大象条件
            if 委托金额 >= 委托量阈值 and 档位数 <= self.卖单价差阈值:
                # 符合卖单大象定义
                大象ID = f"{股票代码}_卖_{卖单价格}"
                
                if 大象ID not in self.卖单大象跟踪:
                    # 新发现的卖单大象
                    self.卖单大象跟踪[大象ID] = {
                        "股票代码": 股票代码,
                        "价格": 卖单价格,
                        "数量": 卖单数量,
                        "委托金额": 委托金额,
                        "档位数": 档位数,
                        "深度位置": i,
                        "首次发现时间": 时间戳,
                        "最后更新时间": 时间戳,
                        "确认次数": 1,
                        "类型": "卖单大象"
                    }
                    self.logger.debug(f"发现疑似卖单大象: {股票代码} 价格:{卖单价格} 数量:{卖单数量} 委托金额:{委托金额} 档位:{档位数}")
                else:
                    # 已经在跟踪的卖单大象
                    大象 = self.卖单大象跟踪[大象ID]
                    大象["数量"] = 卖单数量
                    大象["委托金额"] = 委托金额
                    大象["档位数"] = 档位数
                    大象["深度位置"] = i
                    大象["最后更新时间"] = 时间戳
                    大象["确认次数"] += 1
                    
                    # 检查是否已经稳定存在足够长时间
                    存在时长 = (时间戳 - 大象["首次发现时间"]) / 1000  # 转为秒
                    
                    if 大象["确认次数"] >= self.确认次数 and 存在时长 >= self.大象稳定时间:
                        # 确认为卖单大象
                        self.logger.info(f"确认卖单大象: {股票代码} 价格:{卖单价格} 数量:{卖单数量} 委托金额:{委托金额} 档位:{档位数} 确认次数:{大象['确认次数']} 存在时长:{存在时长}秒")
                        return 大象
                        
                # 找到一个符合条件的卖单大象后就停止扫描
                break
                
        # 清理过期的卖单大象跟踪记录
        self._清理过期卖单大象(时间戳)
        
        return None
    
    def 检查大象稳定性(self, 股票代码: str, 类型: str = "买单", 当前时间: datetime = None) -> bool:
        """检查指定股票的大象是否稳定存在
        
        参数:
            股票代码: 股票代码
            类型: 大象类型，"买单"或"卖单"
            当前时间: 当前时间，默认为None，将使用系统时间
            
        返回:
            是否稳定存在
        """
        if 类型 == "买单":
            大象 = self.获取大象信息(股票代码, 类型)
        else:
            大象 = self.获取大象信息(股票代码, 类型)
            
        if not 大象:
            return False
        
        if 大象["确认次数"] >= self.确认次数:
            return True
            
        return False
    
    def 获取大象信息(self, 股票代码: str, 类型: str = "买单") -> Optional[Dict]:
        """获取指定股票的大象信息
        
        参数:
            股票代码: 股票代码
            类型: 大象类型，"买单"或"卖单"
            
        返回:
            大象信息字典或None
        """
        # 遍历大象跟踪列表，查找匹配的大象信息
        目标大象跟踪 = self.大象跟踪 if 类型 == "买单" else self.卖单大象跟踪
        
        for 大象ID, 大象 in list(目标大象跟踪.items()):
            if 大象["股票代码"] == 股票代码 and 大象["确认次数"] >= self.确认次数:
                return 大象
                
        return None
    
    def 检查大象是否消失(self, 股票代码: str, 盘口数据: Dict, 类型: str = "买单") -> bool:
        """检查大象是否已经消失
        
        参数:
            股票代码: 股票代码
            盘口数据: 当前盘口数据 {"买盘": [(价格, 数量), ...], "卖盘": [(价格, 数量), ...]}
            类型: 大象类型，"买单"或"卖单"
            
        返回:
            大象是否消失
        """
        目标大象跟踪 = self.大象跟踪 if 类型 == "买单" else self.卖单大象跟踪
        目标盘口数据 = 盘口数据["买盘"] if 类型 == "买单" else 盘口数据["卖盘"]
        
        大象 = self.获取大象信息(股票代码, 类型)
        if not 大象:
            return True  # 没有大象，视为已消失
        
        大象价格 = 大象["价格"]
        大象数量 = 大象["数量"]
        
        # 检查当前盘口中是否还存在相同价格的大象
        价格匹配 = False
        数量下降百分比 = 0
        
        for 价格, 数量 in 目标盘口数据:
            if 价格 == 大象价格:
                价格匹配 = True
                
                # 计算数量下降百分比
                if 大象数量 > 0:
                    数量下降百分比 = (大象数量 - 数量) / 大象数量 * 100
                
                # 更新大象数量
                if 价格匹配:
                    for 大象ID, 记录 in list(目标大象跟踪.items()):
                        if 记录["股票代码"] == 股票代码 and 记录["价格"] == 大象价格:
                            记录["数量"] = 数量
                
                break
        
        # 判断大象是否消失的条件：
        # 1. 价格不再匹配
        # 2. 数量下降超过80%
        if not 价格匹配 or 数量下降百分比 > 80:
            # 大象已消失，从跟踪列表中移除
            self.logger.info(f"{类型}大象已消失: {股票代码} 价格:{大象价格} 原数量:{大象数量}")
            
            # 删除对应的大象记录
            要删除的ID = []
            for 大象ID, 记录 in list(目标大象跟踪.items()):
                if 记录["股票代码"] == 股票代码 and 记录["价格"] == 大象价格:
                    要删除的ID.append(大象ID)
            
            for ID in 要删除的ID:
                if ID in 目标大象跟踪:
                    del 目标大象跟踪[ID]
            
            return True
            
        return False
        
    def _清理过期大象(self, 当前时间戳: int, 超时时间: int = 10000):
        """清理过期的大象跟踪记录
        
        参数:
            当前时间戳: 当前时间戳(毫秒)
            超时时间: 超时时间(毫秒)，默认10秒
        """
        要删除的ID = []
        for 大象ID, 大象 in list(self.大象跟踪.items()):
            if 当前时间戳 - 大象["最后更新时间"] > 超时时间:
                要删除的ID.append(大象ID)
                
        for ID in 要删除的ID:
            if ID in self.大象跟踪:
                del self.大象跟踪[ID]
    
    def _清理过期卖单大象(self, 当前时间戳: int, 超时时间: int = 10000):
        """清理过期的卖单大象跟踪记录
        
        参数:
            当前时间戳: 当前时间戳(毫秒)
            超时时间: 超时时间(毫秒)，默认10秒
        """
        要删除的ID = []
        for 大象ID, 大象 in list(self.卖单大象跟踪.items()):
            if 当前时间戳 - 大象["最后更新时间"] > 超时时间:
                要删除的ID.append(大象ID)
                
        for ID in 要删除的ID:
            if ID in self.卖单大象跟踪:
                del self.卖单大象跟踪[ID]
    
    def 重置(self, 股票代码: str = None):
        """重置大象跟踪状态
        
        参数:
            股票代码: 指定股票代码，如果为None则重置所有
        """
        if 股票代码 is None:
            # 重置所有
            self.大象跟踪.clear()
            self.卖单大象跟踪.clear()
            self.logger.info("已重置所有大象跟踪状态")
        else:
            # 重置指定股票
            要删除的ID = []
            for 大象ID, 大象 in list(self.大象跟踪.items()):
                if 大象["股票代码"] == 股票代码:
                    要删除的ID.append(大象ID)
            
            for ID in 要删除的ID:
                if ID in self.大象跟踪:
                    del self.大象跟踪[ID]
            
            要删除的ID = []
            for 大象ID, 大象 in list(self.卖单大象跟踪.items()):
                if 大象["股票代码"] == 股票代码:
                    要删除的ID.append(大象ID)
            
            for ID in 要删除的ID:
                if ID in self.卖单大象跟踪:
                    del self.卖单大象跟踪[ID]
                    
            self.logger.info(f"已重置股票 {股票代码} 的大象跟踪状态")