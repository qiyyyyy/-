#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
资金管理模块 - 管理股票池和现金池
"""
from typing import Dict, List, Optional
import numpy as np
from copy import copy


class 资金管理器:
    """资金管理器类，负责管理股票池和现金池资金分配"""
    
    def __init__(self, 初始资产: float = 0, 股票池比例: float = 0.5, 买回保障金比例: float = 0.7):
        """
        初始化资金管理器
        
        参数:
            初始资产: 策略初始总资产
            股票池比例: 股票资金池目标比例，默认0.5 (50%)
            买回保障金比例: 现金池中作为买回保障的比例，默认0.7 (70%)
        """
        self.初始资产 = 初始资产
        self.当前总资产 = 初始资产
        self.股票池比例 = 股票池比例
        self.买回保障金比例 = 买回保障金比例
        
        # 资金池状态
        self.股票池资产 = 初始资产 * 股票池比例
        self.现金池资产 = 初始资产 * (1 - 股票池比例)
        self.买回保障金 = self.现金池资产 * 买回保障金比例
        self.新建仓资金 = self.现金池资产 * (1 - 买回保障金比例)
        
        # 股票持仓记录 {股票代码: 持有数量}
        self.持仓 = {}
        self.持仓成本 = {}  # {股票代码: 成本价}
        
        # 交易记录
        self.今日交易记录 = []
    
    def 更新资产状态(self, 总资产: float, 持仓市值: float):
        """
        更新资产状态
        
        参数:
            总资产: 当前总资产
            持仓市值: 当前持仓市值
        """
        self.当前总资产 = 总资产
        self.股票池资产 = 持仓市值
        self.现金池资产 = 总资产 - 持仓市值
        self.买回保障金 = self.现金池资产 * self.买回保障金比例
        self.新建仓资金 = self.现金池资产 * (1 - self.买回保障金比例)
        
        # 检查资金池是否平衡，返回是否需要调整
        return self.检查资金池平衡()
    
    def 更新持仓(self, 股票代码: str, 数量: int, 价格: float, 是买入: bool = True):
        """
        更新持仓信息
        
        参数:
            股票代码: 股票代码
            数量: 交易数量
            价格: 交易价格
            是买入: 是否为买入操作
        """
        if 股票代码 not in self.持仓:
            self.持仓[股票代码] = 0
            self.持仓成本[股票代码] = 0
        
        原持仓 = self.持仓[股票代码]
        原成本 = self.持仓成本[股票代码]
        
        if 是买入:
            # 买入操作更新持仓和成本
            新持仓 = 原持仓 + 数量
            if 新持仓 > 0:
                新成本 = (原持仓 * 原成本 + 数量 * 价格) / 新持仓
            else:
                新成本 = 价格
            
            # 记录交易并减少可用现金
            减少的现金 = 数量 * 价格
            self.现金池资产 -= 减少的现金
            
            # 优先减少新建仓资金，不足则减少买回保障金
            if self.新建仓资金 >= 减少的现金:
                self.新建仓资金 -= 减少的现金
            else:
                self.买回保障金 -= (减少的现金 - self.新建仓资金)
                self.新建仓资金 = 0
        else:
            # 卖出操作
            新持仓 = 原持仓 - 数量
            if 新持仓 <= 0:
                新持仓 = 0
                新成本 = 0
            else:
                新成本 = 原成本  # 卖出不改变成本
            
            # 增加现金
            增加的现金 = 数量 * 价格
            self.现金池资产 += 增加的现金
            
            # 增加买回保障金
            self.买回保障金 += 增加的现金
        
        self.持仓[股票代码] = 新持仓
        self.持仓成本[股票代码] = 新成本
        
        # 记录交易
        交易记录 = {
            "时间": None,  # 由调用方填充实际交易时间
            "股票代码": 股票代码,
            "方向": "买入" if 是买入 else "卖出",
            "价格": 价格,
            "数量": 数量,
            "金额": 数量 * 价格
        }
        
        self.今日交易记录.append(交易记录)
        
        return 交易记录
    
    def 检查资金池平衡(self) -> bool:
        """
        检查资金池是否平衡，返回是否需要调整
        
        返回:
            需要调整: 是否需要调整资金池
        """
        目标股票池资产 = self.当前总资产 * self.股票池比例
        当前股票池资产 = self.股票池资产
        
        # 如果偏差大于5%，返回需要调整
        偏差比例 = abs(当前股票池资产 - 目标股票池资产) / self.当前总资产
        需要调整 = 偏差比例 > 0.05
        
        return 需要调整
    
    def 获取可卖出数量(self, 股票代码: str) -> int:
        """
        获取指定股票当前可卖出数量
        
        参数:
            股票代码: 股票代码
            
        返回:
            可卖出数量
        """
        if 股票代码 in self.持仓:
            return self.持仓[股票代码]
        return 0
    
    def 获取可用买回资金(self) -> float:
        """
        获取当前可用于买回的资金
        
        返回:
            可用买回资金
        """
        return self.买回保障金
    
    def 获取可建仓资金(self) -> float:
        """
        获取当前可用于建立新仓位的资金
        
        返回:
            可建仓资金
        """
        return self.新建仓资金
    
    def 计算建仓数量(self, 股票代码: str, 价格: float, 最大仓位比例: float = 0.1) -> int:
        """
        计算建立新仓位的数量
        
        参数:
            股票代码: 股票代码
            价格: 当前价格
            最大仓位比例: 单个股票最大仓位占总资产比例，默认0.1 (10%)
            
        返回:
            建仓数量
        """
        # 计算最大可投入资金
        最大可投入 = min(self.新建仓资金, self.当前总资产 * 最大仓位比例)
        
        # 计算可买数量，取整百
        数量 = int(最大可投入 / 价格 / 100) * 100
        
        return 数量
    
    def 获取每日统计(self) -> Dict:
        """
        获取每日资金统计信息
        
        返回:
            统计信息字典
        """
        交易总额 = sum(record["金额"] for record in self.今日交易记录)
        买入总额 = sum(record["金额"] for record in self.今日交易记录 if record["方向"] == "买入")
        卖出总额 = sum(record["金额"] for record in self.今日交易记录 if record["方向"] == "卖出")
        交易次数 = len(self.今日交易记录)
        
        统计 = {
            "当前总资产": self.当前总资产,
            "股票池资产": self.股票池资产,
            "现金池资产": self.现金池资产,
            "买回保障金": self.买回保障金,
            "新建仓资金": self.新建仓资金,
            "交易总额": 交易总额,
            "买入总额": 买入总额,
            "卖出总额": 卖出总额,
            "交易次数": 交易次数,
            "持仓数量": len([code for code, amount in self.持仓.items() if amount > 0])
        }
        
        return 统计
    
    def 日终清算(self):
        """日终清算操作，重置日内数据"""
        self.今日交易记录 = [] 