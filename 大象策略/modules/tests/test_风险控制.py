#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
风险控制模块的测试文件
"""
import os
import sys
from typing import Dict

# 添加父目录到系统路径，解决导入问题
当前路径 = os.path.dirname(os.path.abspath(__file__))
父目录 = os.path.dirname(当前路径)
项目根目录 = os.path.dirname(父目录)
if 父目录 not in sys.path:
    sys.path.append(父目录)
if 项目根目录 not in sys.path:
    sys.path.append(项目根目录)

# 灵活导入模块
try:
    # 当作为包导入时
    from modules.风险控制 import 风险控制器
    from modules.日志 import get_logger
except ImportError:
    try:
        # 当直接运行时
        from 大象策略.modules.风险控制 import 风险控制器
        from 大象策略.modules.日志 import get_logger
    except ImportError:
        # 相对路径导入
        from ..风险控制 import 风险控制器
        from ..日志 import get_logger

def 测试风险控制() -> Dict:
    """测试风险控制功能"""
    logger = get_logger("测试_风险控制")
    logger.info("开始测试风险控制功能")
    
    # 创建风险控制器实例
    风控 = 风险控制器(
        单笔最大亏损比例=0.01,
        单股最大亏损比例=0.03,
        日内最大亏损比例=0.05,
        单股最大交易次数=50,
        总交易次数限制=200,
        最大连续亏损次数=5
    )
    # 设置总资产
    风控.更新总资产(1000000.0)
    
    # 测试单笔交易亏损检查
    单笔亏损检查结果 = 风控.检查风控("000001", 盈亏=-20000.0)
    logger.info(f"单笔亏损检查结果: {单笔亏损检查结果}")
    
    # 测试单股亏损检查
    if "000001" not in 风控.股票盈亏:
        风控.股票盈亏["000001"] = 0
    风控.股票盈亏["000001"] -= 5000.0
    单股亏损检查结果 = 风控.检查风控("000001", 盈亏=-20000.0)
    logger.info(f"单股亏损检查结果: {单股亏损检查结果}")
    
    # 测试日内交易次数检查
    if "000001" not in 风控.股票交易次数:
        风控.股票交易次数["000001"] = 0
    风控.股票交易次数["000001"] += 1
    交易次数检查结果 = 风控.检查风控("000001")
    logger.info(f"交易次数检查结果: {交易次数检查结果}")
    
    # 测试风控综合评估
    if "000002" not in 风控.股票交易次数:
        风控.股票交易次数["000002"] = 0
    for i in range(51):  # 超过50次交易限制
        风控.股票交易次数["000002"] += 1
    
    风控评估结果 = 风控.检查风控("000002")
    logger.info(f"风控评估结果: {风控评估结果}")
    
    # 测试重置功能
    风控.重置日内统计()
    # 确保所有交易次数和其他统计都被重置
    if "000002" in 风控.股票交易次数:
        logger.error(f"重置后交易次数应该为0，但实际是: {风控.股票交易次数['000002']}")
    
    # 由于重置，不再在风控冷却期内，应该允许交易
    风控.风控冷却期 = {}  # 显式清空风控冷却期
    重置后检查结果 = 风控.检查风控("000002")
    logger.info(f"重置后交易次数检查结果: {重置后检查结果}")
    
    # 验证结果
    测试通过 = (
        not 单笔亏损检查结果 and          # 单笔亏损超限，应该拒绝
        not 单股亏损检查结果 and          # 单股亏损超限，应该拒绝
        not 交易次数检查结果 and          # 已在冷却期，应该拒绝
        not 风控评估结果 and              # 交易次数过多，应该拒绝
        重置后检查结果                    # 重置后，应该允许
    )
    
    if 测试通过:
        logger.info("风险控制测试通过")
    else:
        logger.error("风险控制测试失败")
    
    return {
        "成功": 测试通过,
        "单笔亏损检查": not 单笔亏损检查结果,
        "单股亏损检查": not 单股亏损检查结果,
        "交易次数检查": 交易次数检查结果,
        "风控评估结果": not 风控评估结果,
        "重置后检查": 重置后检查结果
    }

def 测试资金风险控制():
    """测试资金相关的风险控制功能"""
    logger = get_logger("测试_资金风险控制")
    logger.info("开始测试资金风险控制功能")
    
    # 创建风险控制器实例
    风控 = 风险控制器(
        单笔最大亏损比例=0.01,
        单股最大亏损比例=0.03,
        日内最大亏损比例=0.05
    )
    # 设置总资产
    风控.更新总资产(1000000.0)
    
    # 模拟记录交易
    交易信息1 = {
        "股票代码": "000001",
        "方向": "买入",
        "价格": 10.0,
        "数量": 1000,
        "盈亏": 0
    }
    
    风控.记录交易(交易信息1)
    
    # 模拟多个股票交易
    交易信息2 = {
        "股票代码": "000002",
        "方向": "买入",
        "价格": 20.0,
        "数量": 500,
        "盈亏": 0
    }
    
    风控.记录交易(交易信息2)
    
    交易信息3 = {
        "股票代码": "000003",
        "方向": "买入",
        "价格": 30.0,
        "数量": 300,
        "盈亏": 0
    }
    
    风控.记录交易(交易信息3)
    
    # 测试总交易次数
    总交易次数 = 风控.日内总交易次数
    logger.info(f"总交易次数: {总交易次数}")
    
    # 测试单股交易次数
    单股交易次数 = 风控.股票交易次数.get("000001", 0)
    logger.info(f"000001单股交易次数: {单股交易次数}")
    
    # 测试重置功能
    风控.重置日内统计()
    重置后交易次数 = 风控.日内总交易次数
    
    # 测试结果
    测试通过 = (
        总交易次数 == 3 and                # 总交易次数应为3
        单股交易次数 == 1 and              # 单股交易次数应为1
        重置后交易次数 == 0                # 重置后交易次数应为0
    )
    
    if 测试通过:
        logger.info("资金风险控制测试通过")
    else:
        logger.error("资金风险控制测试失败")
    
    return {
        "成功": 测试通过,
        "总交易次数": 总交易次数 == 3,
        "单股交易次数": 单股交易次数 == 1,
        "重置后交易次数": 重置后交易次数 == 0
    }

def 运行所有测试():
    """运行所有测试"""
    print("=" * 50)
    print("开始运行风险控制模块测试")
    print("=" * 50)
    
    # 确保日志配置
    try:
        from 大象策略.modules.日志 import 配置日志
    except ImportError:
        try:
            from modules.日志 import 配置日志
        except ImportError:
            try:
                from ..日志 import 配置日志
            except ImportError:
                # 尝试最后方法：从本地导入
                from 日志 import 配置日志
    
    try:
        配置日志(级别="info")
    except Exception as e:
        print(f"警告: 配置日志系统失败: {e}")
    
    测试结果1 = 测试风险控制()
    print(f"风险控制功能测试结果: {测试结果1}")
    
    测试结果2 = 测试资金风险控制()
    print(f"资金风险控制测试结果: {测试结果2}")
    
    print("=" * 50)
    if 测试结果1.get("成功", False) and 测试结果2.get("成功", False):
        print("所有测试通过!")
    else:
        print("测试失败，请检查日志")
    print("=" * 50)

if __name__ == "__main__":
    运行所有测试() 