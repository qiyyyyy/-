#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
风险控制模块 - 管理交易风险
"""
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta


class 风险控制器:
    """风险控制器类，负责管理交易风险"""
    
    def __init__(
        self,
        单笔最大亏损比例: float = 0.001,  # 单笔交易最大亏损占总资产比例
        单股最大亏损比例: float = 0.005,  # 单只股票日内最大亏损占总资产比例
        日内最大亏损比例: float = 0.01,   # 日内最大总亏损占总资产比例
        单股最大交易次数: int = 10,       # 单只股票日内最大交易次数
        总交易次数限制: int = 100,        # 日内总交易次数限制
        日内风控重置时间: str = "15:00"   # 风控状态重置时间，格式为"HH:MM"
    ):
        """
        初始化风险控制器
        
        参数:
            单笔最大亏损比例: 单笔交易最大亏损占总资产比例
            单股最大亏损比例: 单只股票日内最大亏损占总资产比例
            日内最大亏损比例: 日内最大总亏损占总资产比例
            单股最大交易次数: 单只股票日内最大交易次数
            总交易次数限制: 日内总交易次数限制
            日内风控重置时间: 风控状态重置时间，格式为"HH:MM"
        """
        self.单笔最大亏损比例 = 单笔最大亏损比例
        self.单股最大亏损比例 = 单股最大亏损比例
        self.日内最大亏损比例 = 日内最大亏损比例
        self.单股最大交易次数 = 单股最大交易次数
        self.总交易次数限制 = 总交易次数限制
        self.日内风控重置时间 = 日内风控重置时间
        
        # 风控状态
        self.当前总资产 = 0
        self.日内总盈亏 = 0
        self.日内总交易次数 = 0
        self.单股交易次数 = {}  # {股票代码: 交易次数}
        self.单股盈亏 = {}  # {股票代码: 盈亏}
        
        # 风控日志
        self.风控日志 = []
        
        # 上次重置时间
        self.上次重置时间 = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    
    def 更新总资产(self, 总资产: float):
        """
        更新当前总资产
        
        参数:
            总资产: 当前总资产
        """
        self.当前总资产 = 总资产
    
    def 记录交易盈亏(self, 股票代码: str, 盈亏: float):
        """
        记录交易盈亏
        
        参数:
            股票代码: 股票代码
            盈亏: 交易盈亏
        """
        # 更新日内总盈亏
        self.日内总盈亏 += 盈亏
        
        # 更新单股盈亏
        if 股票代码 not in self.单股盈亏:
            self.单股盈亏[股票代码] = 0
        self.单股盈亏[股票代码] += 盈亏
        
        # 更新交易次数
        self.日内总交易次数 += 1
        if 股票代码 not in self.单股交易次数:
            self.单股交易次数[股票代码] = 0
        self.单股交易次数[股票代码] += 1
        
        # 记录风控日志
        风控记录 = {
            "时间": datetime.now(),
            "股票代码": 股票代码,
            "盈亏": 盈亏,
            "日内总盈亏": self.日内总盈亏,
            "单股盈亏": self.单股盈亏[股票代码],
            "单股交易次数": self.单股交易次数[股票代码],
            "日内总交易次数": self.日内总交易次数
        }
        self.风控日志.append(风控记录)
    
    def 检查单笔亏损风险(self, 预估亏损: float) -> bool:
        """
        检查单笔交易亏损风险
        
        参数:
            预估亏损: 预估亏损金额（负数）
            
        返回:
            是否允许交易
        """
        if self.当前总资产 <= 0:
            return False
        
        亏损比例 = abs(预估亏损) / self.当前总资产
        return 亏损比例 <= self.单笔最大亏损比例
    
    def 检查单股亏损风险(self, 股票代码: str, 预估亏损: float) -> bool:
        """
        检查单只股票亏损风险
        
        参数:
            股票代码: 股票代码
            预估亏损: 预估亏损金额（负数）
            
        返回:
            是否允许交易
        """
        if self.当前总资产 <= 0:
            return False
        
        # 获取当前单股累计亏损
        当前亏损 = 0
        if 股票代码 in self.单股盈亏:
            当前亏损 = min(0, self.单股盈亏[股票代码])
        
        # 计算加上预估亏损后的总亏损
        总亏损 = 当前亏损 + 预估亏损
        亏损比例 = abs(总亏损) / self.当前总资产
        
        return 亏损比例 <= self.单股最大亏损比例
    
    def 检查日内亏损风险(self, 预估亏损: float) -> bool:
        """
        检查日内总亏损风险
        
        参数:
            预估亏损: 预估亏损金额（负数）
            
        返回:
            是否允许交易
        """
        if self.当前总资产 <= 0:
            return False
        
        # 计算当前日内亏损
        当前亏损 = min(0, self.日内总盈亏)
        
        # 计算加上预估亏损后的总亏损
        总亏损 = 当前亏损 + 预估亏损
        亏损比例 = abs(总亏损) / self.当前总资产
        
        return 亏损比例 <= self.日内最大亏损比例
    
    def 检查交易次数限制(self, 股票代码: str) -> bool:
        """
        检查交易次数限制
        
        参数:
            股票代码: 股票代码
            
        返回:
            是否允许交易
        """
        # 检查日内总交易次数
        if self.日内总交易次数 >= self.总交易次数限制:
            return False
        
        # 检查单股交易次数
        单股次数 = 0
        if 股票代码 in self.单股交易次数:
            单股次数 = self.单股交易次数[股票代码]
        
        return 单股次数 < self.单股最大交易次数
    
    def 检查交易风险(self, 股票代码: str, 预估亏损: float = 0) -> Tuple[bool, str]:
        """
        综合检查交易风险
        
        参数:
            股票代码: 股票代码
            预估亏损: 预估亏损金额（负数）
            
        返回:
            (是否允许交易, 拒绝原因)
        """
        # 检查单笔亏损风险
        if not self.检查单笔亏损风险(预估亏损):
            return False, "单笔亏损超限"
        
        # 检查单股亏损风险
        if not self.检查单股亏损风险(股票代码, 预估亏损):
            return False, "单股亏损超限"
        
        # 检查日内亏损风险
        if not self.检查日内亏损风险(预估亏损):
            return False, "日内亏损超限"
        
        # 检查交易次数限制
        if not self.检查交易次数限制(股票代码):
            return False, "交易次数超限"
        
        return True, ""
    
    def 检查并重置风控状态(self):
        """
        检查并在需要时重置风控状态
        
        返回:
            是否已重置
        """
        当前时间 = datetime.now()
        重置时间 = self._解析重置时间(当前时间)
        
        # 如果当前时间在重置时间之后，且上次重置时间在重置时间之前，则需要重置
        if (当前时间 >= 重置时间 and self.上次重置时间 < 重置时间) or (当前时间.date() > self.上次重置时间.date()):
            self.重置风控状态()
            self.上次重置时间 = 当前时间
            return True
        
        return False
    
    def 重置风控状态(self):
        """重置风控状态"""
        # 保留总资产信息，重置其他风控状态
        self.日内总盈亏 = 0
        self.日内总交易次数 = 0
        self.单股交易次数 = {}
        self.单股盈亏 = {}
        
        # 添加重置记录到风控日志
        风控记录 = {
            "时间": datetime.now(),
            "类型": "重置",
            "日内总盈亏": 0,
            "日内总交易次数": 0
        }
        self.风控日志.append(风控记录)
    
    def 获取风控状态(self) -> Dict:
        """
        获取当前风控状态
        
        返回:
            风控状态字典
        """
        return {
            "当前总资产": self.当前总资产,
            "日内总盈亏": self.日内总盈亏,
            "日内总交易次数": self.日内总交易次数,
            "单股交易次数": self.单股交易次数,
            "单股盈亏": self.单股盈亏,
            "上次重置时间": self.上次重置时间
        }
    
    def 获取交易风险评估(self, 股票代码: str) -> Dict:
        """
        获取指定股票的交易风险评估
        
        参数:
            股票代码: 股票代码
            
        返回:
            风险评估字典
        """
        单股盈亏 = 0
        if 股票代码 in self.单股盈亏:
            单股盈亏 = self.单股盈亏[股票代码]
        
        单股交易次数 = 0
        if 股票代码 in self.单股交易次数:
            单股交易次数 = self.单股交易次数[股票代码]
        
        单股亏损比例 = 0
        if 单股盈亏 < 0 and self.当前总资产 > 0:
            单股亏损比例 = abs(单股盈亏) / self.当前总资产
        
        总亏损比例 = 0
        if self.日内总盈亏 < 0 and self.当前总资产 > 0:
            总亏损比例 = abs(self.日内总盈亏) / self.当前总资产
        
        评估 = {
            "股票代码": 股票代码,
            "单股盈亏": 单股盈亏,
            "单股交易次数": 单股交易次数,
            "单股亏损比例": 单股亏损比例,
            "单股亏损超限": 单股亏损比例 > self.单股最大亏损比例,
            "日内总盈亏": self.日内总盈亏,
            "日内总交易次数": self.日内总交易次数,
            "总亏损比例": 总亏损比例,
            "总亏损超限": 总亏损比例 > self.日内最大亏损比例,
            "单股次数超限": 单股交易次数 >= self.单股最大交易次数,
            "总次数超限": self.日内总交易次数 >= self.总交易次数限制
        }
        
        return 评估
    
    def 导出风控日志(self) -> List[Dict]:
        """
        导出风控日志
        
        返回:
            风控日志列表
        """
        return self.风控日志
    
    def _解析重置时间(self, 当前时间: datetime) -> datetime:
        """
        解析重置时间字符串为datetime对象
        
        参数:
            当前时间: 当前时间
            
        返回:
            重置时间datetime对象
        """
        时间部分 = self.日内风控重置时间.split(":")
        小时 = int(时间部分[0])
        分钟 = int(时间部分[1])
        
        重置时间 = 当前时间.replace(hour=小时, minute=分钟, second=0, microsecond=0)
        return 重置时间 