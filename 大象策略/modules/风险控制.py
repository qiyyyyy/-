#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
风险控制模块 - 负责交易风险控制
"""
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import time

from .日志 import get_logger

class 风险控制器:
    """风险控制器类，负责交易风险控制"""
    
    def __init__(
        self, 
        单笔最大亏损比例: float = 0.01,  # 单笔交易最大亏损占总资产比例
        单股最大亏损比例: float = 0.03,  # 单只股票日内最大亏损占总资产比例
        日内最大亏损比例: float = 0.05,  # 日内最大总亏损占总资产比例
        单股最大交易次数: int = 50,  # 单只股票日内最大交易次数
        总交易次数限制: int = 200,  # 日内总交易次数限制
        最大连续亏损次数: int = 5,  # 最大连续亏损次数
        风控冷却时间: int = 600,  # 触发风控后的冷却时间(秒)
    ):
        """
        初始化风险控制器
        
        参数:
            单笔最大亏损比例: 单笔交易最大亏损占总资产比例
            单股最大亏损比例: 单只股票日内最大亏损占总资产比例
            日内最大亏损比例: 日内最大总亏损占总资产比例
            单股最大交易次数: 单只股票日内最大交易次数
            总交易次数限制: 日内总交易次数限制
            最大连续亏损次数: 最大连续亏损次数
            风控冷却时间: 触发风控后的冷却时间(秒)
        """
        # 保存参数
        self.单笔最大亏损比例 = 单笔最大亏损比例
        self.单股最大亏损比例 = 单股最大亏损比例
        self.日内最大亏损比例 = 日内最大亏损比例
        self.单股最大交易次数 = 单股最大交易次数
        self.总交易次数限制 = 总交易次数限制
        self.最大连续亏损次数 = 最大连续亏损次数
        self.风控冷却时间 = 风控冷却时间
        
        # 初始化风控状态
        self.总资产 = 0
        self.日内总盈亏 = 0
        self.日内总交易次数 = 0
        self.连续亏损次数 = 0
        self.股票盈亏 = {}  # {股票代码: 日内盈亏}
        self.股票交易次数 = {}  # {股票代码: 交易次数}
        self.交易记录 = []  # 交易记录
        self.风控触发记录 = []  # 风控触发记录
        
        # 风控冷却期 {股票代码: 冷却截止时间}
        self.风控冷却期 = {}
        
        # 日志记录器
        self.logger = get_logger("风险控制")
        self.logger.info("风险控制器初始化完成")
    
    def 更新总资产(self, 总资产: float) -> None:
        """
        更新策略总资产
        
        参数:
            总资产: 当前总资产
        """
        self.总资产 = 总资产
    
    def 记录交易(self, 交易信息: Dict) -> bool:
        """
        记录交易并检查是否触发风控
        
        参数:
            交易信息: 交易信息字典，包括股票代码，买入/卖出，价格，数量，盈亏等
            
        返回:
            是否通过风控检查
        """
        # 提取交易信息
        股票代码 = 交易信息["股票代码"]
        盈亏 = 交易信息.get("盈亏", 0)
        方向 = 交易信息.get("方向", "未知")
        
        # 更新日内总盈亏
        self.日内总盈亏 += 盈亏
        
        # 更新股票盈亏
        if 股票代码 not in self.股票盈亏:
            self.股票盈亏[股票代码] = 0
        self.股票盈亏[股票代码] += 盈亏
        
        # 更新交易次数
        self.日内总交易次数 += 1
        if 股票代码 not in self.股票交易次数:
            self.股票交易次数[股票代码] = 0
        self.股票交易次数[股票代码] += 1
        
        # 记录交易
        self.交易记录.append({
            "时间": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "股票代码": 股票代码,
            "方向": 方向,
            "价格": 交易信息.get("价格", 0),
            "数量": 交易信息.get("数量", 0),
            "盈亏": 盈亏,
            "累计盈亏": self.日内总盈亏
        })
        
        # 更新连续亏损次数
        if 盈亏 < 0:
            self.连续亏损次数 += 1
        else:
            self.连续亏损次数 = 0
        
        # 检查是否触发风控
        return self.检查风控(股票代码, 盈亏)
    
    def 检查风控(self, 股票代码: str, 盈亏: float = 0) -> bool:
        """
        检查是否触发风控
        
        参数:
            股票代码: 股票代码
            盈亏: 当前交易盈亏
        
        返回:
            是否通过风控检查，True表示通过，False表示触发风控
        """
        # 检查是否在风控冷却期
        if 股票代码 in self.风控冷却期:
            冷却截止时间 = self.风控冷却期[股票代码]
            if datetime.now() < 冷却截止时间:
                self.logger.warning(f"股票 {股票代码} 在风控冷却期内，禁止交易")
                return False
            else:
                # 冷却期结束，移除冷却记录
                del self.风控冷却期[股票代码]
        
        # 检查单笔亏损是否超过限制
        if 盈亏 < 0 and abs(盈亏) > self.总资产 * self.单笔最大亏损比例:
            self.logger.warning(f"触发单笔亏损风控: {股票代码} 亏损 {盈亏}，超过限制 {self.总资产 * self.单笔最大亏损比例}")
            self._触发风控(股票代码, "单笔亏损超限", f"亏损 {盈亏}，超过限制 {self.总资产 * self.单笔最大亏损比例}")
            return False
        
        # 检查单股累计亏损是否超过限制
        if 股票代码 in self.股票盈亏 and self.股票盈亏[股票代码] < 0:
            单股亏损 = abs(self.股票盈亏[股票代码])
            if 单股亏损 > self.总资产 * self.单股最大亏损比例:
                self.logger.warning(f"触发单股累计亏损风控: {股票代码} 累计亏损 {单股亏损}，超过限制 {self.总资产 * self.单股最大亏损比例}")
                self._触发风控(股票代码, "单股累计亏损超限", f"累计亏损 {单股亏损}，超过限制 {self.总资产 * self.单股最大亏损比例}")
                return False
        
        # 检查日内总亏损是否超过限制
        if self.日内总盈亏 < 0:
            总亏损 = abs(self.日内总盈亏)
            if 总亏损 > self.总资产 * self.日内最大亏损比例:
                self.logger.warning(f"触发日内总亏损风控: 累计亏损 {总亏损}，超过限制 {self.总资产 * self.日内最大亏损比例}")
                self._触发风控(股票代码, "日内总亏损超限", f"累计亏损 {总亏损}，超过限制 {self.总资产 * self.日内最大亏损比例}")
                return False
        
        # 检查单股交易次数是否超过限制
        if 股票代码 in self.股票交易次数 and self.股票交易次数[股票代码] > self.单股最大交易次数:
            self.logger.warning(f"触发单股交易次数风控: {股票代码} 交易次数 {self.股票交易次数[股票代码]}，超过限制 {self.单股最大交易次数}")
            self._触发风控(股票代码, "单股交易次数超限", f"交易次数 {self.股票交易次数[股票代码]}，超过限制 {self.单股最大交易次数}")
            return False
        
        # 检查总交易次数是否超过限制
        if self.日内总交易次数 > self.总交易次数限制:
            self.logger.warning(f"触发总交易次数风控: 交易次数 {self.日内总交易次数}，超过限制 {self.总交易次数限制}")
            self._触发风控(股票代码, "总交易次数超限", f"交易次数 {self.日内总交易次数}，超过限制 {self.总交易次数限制}")
            return False
        
        # 检查连续亏损次数是否超过限制
        if self.连续亏损次数 > self.最大连续亏损次数:
            self.logger.warning(f"触发连续亏损次数风控: 连续亏损 {self.连续亏损次数} 次，超过限制 {self.最大连续亏损次数}")
            self._触发风控(股票代码, "连续亏损次数超限", f"连续亏损 {self.连续亏损次数} 次，超过限制 {self.最大连续亏损次数}")
            return False
        
        # 通过所有风控检查
        return True
    
    def _触发风控(self, 股票代码: str, 风控类型: str, 详情: str) -> None:
        """
        触发风控，记录风控信息并设置冷却期
        
        参数:
            股票代码: 股票代码
            风控类型: 风控类型
            详情: 风控详情
        """
        # 记录风控触发
        触发记录 = {
            "时间": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "股票代码": 股票代码,
            "风控类型": 风控类型,
            "详情": 详情,
            "冷却截止时间": (datetime.now() + timedelta(seconds=self.风控冷却时间)).strftime("%Y-%m-%d %H:%M:%S")
        }
        
        self.风控触发记录.append(触发记录)
        
        # 设置风控冷却期
        self.风控冷却期[股票代码] = datetime.now() + timedelta(seconds=self.风控冷却时间)
    
    def 获取风控状态(self) -> Dict:
        """
        获取当前风控状态
        
        返回:
            风控状态字典
        """
        return {
            "总资产": self.总资产,
            "日内总盈亏": self.日内总盈亏,
            "日内总交易次数": self.日内总交易次数,
            "连续亏损次数": self.连续亏损次数,
            "股票盈亏": self.股票盈亏,
            "股票交易次数": self.股票交易次数,
            "风控冷却期": {k: v.strftime("%Y-%m-%d %H:%M:%S") for k, v in self.风控冷却期.items()},
            "风控触发记录": self.风控触发记录
        }
    
    def 重置日内统计(self) -> None:
        """重置日内统计数据，用于交易日切换"""
        self.日内总盈亏 = 0
        self.日内总交易次数 = 0
        self.连续亏损次数 = 0
        self.股票盈亏 = {}
        self.股票交易次数 = {}
        self.交易记录 = []
        
        # 保留风控触发记录和冷却期
        # 清理已过期的冷却期
        当前时间 = datetime.now()
        过期键 = [k for k, v in self.风控冷却期.items() if v < 当前时间]
        for k in 过期键:
            del self.风控冷却期[k]
    
    def 获取股票风控状态(self, 股票代码: str) -> Dict:
        """
        获取指定股票的风控状态
        
        参数:
            股票代码: 股票代码
            
        返回:
            股票风控状态字典
        """
        在冷却期 = False
        冷却剩余时间 = 0
        
        if 股票代码 in self.风控冷却期:
            冷却截止时间 = self.风控冷却期[股票代码]
            当前时间 = datetime.now()
            
            if 当前时间 < 冷却截止时间:
                在冷却期 = True
                冷却剩余时间 = (冷却截止时间 - 当前时间).total_seconds()
        
        return {
            "股票代码": 股票代码,
            "累计盈亏": self.股票盈亏.get(股票代码, 0),
            "交易次数": self.股票交易次数.get(股票代码, 0),
            "在冷却期": 在冷却期,
            "冷却剩余时间": 冷却剩余时间,
            "单股最大亏损限制": self.总资产 * self.单股最大亏损比例,
            "单股最大交易次数限制": self.单股最大交易次数,
        } 