#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
交易执行模块 - 负责发送和管理订单
"""
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import time


class 交易执行器:
    """交易执行器类，负责发送和管理订单"""
    
    def __init__(
        self,
        价格偏移量: float = 0.01,  # 1分钱
        卖出偏移量倍数: float = 2.0,  # 卖出价高于大象价格的偏移量倍数
        买入偏移量倍数: float = 1.0,  # 买入价高于大象价格的偏移量倍数
        等待时间: int = 30,  # 等待订单成交的最长时间(秒)
        冷却时间: int = 300,  # 同一股票交易后的冷却时间(秒)
        止损价格比例: float = 0.5  # 相对于大象价差的止损比例
    ):
        """
        初始化交易执行器
        
        参数:
            价格偏移量: 最小价格变动单位
            卖出偏移量倍数: 卖出价高于大象价格的偏移量倍数
            买入偏移量倍数: 买入价高于大象价格的偏移量倍数
            等待时间: 等待订单成交的最长时间(秒)
            冷却时间: 同一股票交易后的冷却时间(秒)
            止损价格比例: 相对于大象价差的止损比例
        """
        self.价格偏移量 = 价格偏移量
        self.卖出偏移量倍数 = 卖出偏移量倍数
        self.买入偏移量倍数 = 买入偏移量倍数
        self.等待时间 = 等待时间
        self.冷却时间 = 冷却时间
        self.止损价格比例 = 止损价格比例
        
        # 活跃订单管理 {订单ID: 订单信息}
        self.活跃订单 = {}
        
        # 完成订单记录 [{订单信息}]
        self.完成订单 = []
        
        # 交易冷却期 {股票代码: 结束时间}
        self.冷却期 = {}
        
        # 交易对 {卖出订单ID: 买入订单ID}
        self.交易对 = {}
    
    def 计算卖出价格(self, 大象信息: Dict) -> float:
        """
        计算卖出价格
        
        参数:
            大象信息: 大象信息
        
        返回:
            卖出价格
        """
        return 大象信息["价格"] + (self.价格偏移量 * self.卖出偏移量倍数)
    
    def 计算买入价格(self, 大象信息: Dict) -> float:
        """
        计算买入价格
        
        参数:
            大象信息: 大象信息
        
        返回:
            买入价格
        """
        return 大象信息["价格"] + (self.价格偏移量 * self.买入偏移量倍数)
    
    def 计算止损价格(self, 大象信息: Dict) -> float:
        """
        计算止损价格
        
        参数:
            大象信息: 大象信息
        
        返回:
            止损价格
        """
        价差 = 大象信息["价差"]
        return 大象信息["价格"] - (价差 * self.止损价格比例)
    
    def 发送卖出订单(self, 交易接口, 股票代码: str, 价格: float, 数量: int, 大象信息: Dict = None) -> str:
        """
        发送卖出订单
        
        参数:
            交易接口: 交易接口对象
            股票代码: 股票代码
            价格: 卖出价格
            数量: 卖出数量
            大象信息: 大象信息，用于记录相关数据
        
        返回:
            订单ID: 如果发送成功，返回订单ID；否则返回None
        """
        # 检查冷却期
        if not self.检查交易冷却期(股票代码):
            return None
        
        try:
            # 发送限价卖出订单
            订单ID = 交易接口.sell(股票代码, 价格, 数量)
            
            if 订单ID:
                # 记录订单信息
                当前时间 = datetime.now()
                订单信息 = {
                    "订单ID": 订单ID,
                    "股票代码": 股票代码,
                    "方向": "卖出",
                    "价格": 价格,
                    "数量": 数量,
                    "状态": "已提交",
                    "提交时间": 当前时间,
                    "超时时间": 当前时间 + timedelta(seconds=self.等待时间),
                    "大象信息": 大象信息
                }
                
                self.活跃订单[订单ID] = 订单信息
                
                # 设置冷却期
                self.设置交易冷却期(股票代码)
                
                return 订单ID
        except Exception as e:
            print(f"发送卖出订单错误: {e}")
        
        return None
    
    def 发送买入订单(self, 交易接口, 股票代码: str, 价格: float, 数量: int, 对应卖出订单ID: str = None, 大象信息: Dict = None) -> str:
        """
        发送买入订单
        
        参数:
            交易接口: 交易接口对象
            股票代码: 股票代码
            价格: 买入价格
            数量: 买入数量
            对应卖出订单ID: 对应的卖出订单ID，用于关联交易对
            大象信息: 大象信息，用于记录相关数据
        
        返回:
            订单ID: 如果发送成功，返回订单ID；否则返回None
        """
        try:
            # 发送限价买入订单
            订单ID = 交易接口.buy(股票代码, 价格, 数量)
            
            if 订单ID:
                # 记录订单信息
                当前时间 = datetime.now()
                订单信息 = {
                    "订单ID": 订单ID,
                    "股票代码": 股票代码,
                    "方向": "买入",
                    "价格": 价格,
                    "数量": 数量,
                    "状态": "已提交",
                    "提交时间": 当前时间,
                    "超时时间": 当前时间 + timedelta(seconds=self.等待时间),
                    "大象信息": 大象信息
                }
                
                self.活跃订单[订单ID] = 订单信息
                
                # 关联交易对
                if 对应卖出订单ID:
                    self.交易对[对应卖出订单ID] = 订单ID
                
                return 订单ID
        except Exception as e:
            print(f"发送买入订单错误: {e}")
        
        return None
    
    def 取消订单(self, 交易接口, 订单ID: str) -> bool:
        """
        取消订单
        
        参数:
            交易接口: 交易接口对象
            订单ID: 要取消的订单ID
        
        返回:
            是否成功: 如果取消成功，返回True；否则返回False
        """
        if 订单ID not in self.活跃订单:
            return False
        
        try:
            # 发送取消订单请求
            结果 = 交易接口.cancel_order(订单ID)
            
            if 结果:
                # 更新订单状态
                self.活跃订单[订单ID]["状态"] = "已取消"
                
                # 移动到完成订单列表
                self.完成订单.append(self.活跃订单[订单ID])
                del self.活跃订单[订单ID]
                
                return True
        except Exception as e:
            print(f"取消订单错误: {e}")
        
        return False
    
    def 更新订单状态(self, 交易接口):
        """
        更新所有活跃订单的状态
        
        参数:
            交易接口: 交易接口对象
        """
        当前时间 = datetime.now()
        要删除的订单IDs = []
        
        for 订单ID, 订单信息 in self.活跃订单.items():
            try:
                # 查询订单状态
                订单状态 = 交易接口.get_order(订单ID)
                
                if 订单状态["status"] == "FILLED":
                    # 订单已成交
                    订单信息["状态"] = "已成交"
                    订单信息["成交时间"] = 当前时间
                    订单信息["成交价格"] = 订单状态["price"]
                    订单信息["成交数量"] = 订单状态["filled"]
                    
                    # 移动到完成订单列表
                    self.完成订单.append(订单信息.copy())
                    要删除的订单IDs.append(订单ID)
                elif 订单状态["status"] == "CANCELED":
                    # 订单已取消
                    订单信息["状态"] = "已取消"
                    
                    # 移动到完成订单列表
                    self.完成订单.append(订单信息.copy())
                    要删除的订单IDs.append(订单ID)
                elif 当前时间 > 订单信息["超时时间"]:
                    # 订单超时，尝试取消
                    self.取消订单(交易接口, 订单ID)
            except Exception as e:
                print(f"更新订单状态错误: {e}")
        
        # 清理已完成的订单
        for 订单ID in 要删除的订单IDs:
            if 订单ID in self.活跃订单:
                del self.活跃订单[订单ID]
    
    def 设置交易冷却期(self, 股票代码: str):
        """
        设置股票的交易冷却期
        
        参数:
            股票代码: 股票代码
        """
        结束时间 = datetime.now() + timedelta(seconds=self.冷却时间)
        self.冷却期[股票代码] = 结束时间
    
    def 检查交易冷却期(self, 股票代码: str) -> bool:
        """
        检查股票是否在交易冷却期内
        
        参数:
            股票代码: 股票代码
        
        返回:
            是否可交易: 如果不在冷却期内，返回True；否则返回False
        """
        if 股票代码 not in self.冷却期:
            return True
        
        当前时间 = datetime.now()
        return 当前时间 > self.冷却期[股票代码]
    
    def 执行高频交易(self, 交易接口, 股票代码: str, 大象信息: Dict, 交易数量: int) -> Dict:
        """
        执行完整的高频交易操作（先卖后买）
        
        参数:
            交易接口: 交易接口对象
            股票代码: 股票代码
            大象信息: 大象信息
            交易数量: 交易数量
        
        返回:
            交易结果: 包含交易详情的字典
        """
        交易结果 = {
            "股票代码": 股票代码,
            "大象价格": 大象信息["价格"],
            "交易数量": 交易数量,
            "卖出订单ID": None,
            "买入订单ID": None,
            "卖出价格": 0,
            "买入价格": 0,
            "卖出状态": "未执行",
            "买入状态": "未执行",
            "利润": 0,
            "状态": "开始",
            "开始时间": datetime.now()
        }
        
        # 计算卖出价格
        卖出价格 = self.计算卖出价格(大象信息)
        交易结果["卖出价格"] = 卖出价格
        
        # 发送卖出订单
        卖出订单ID = self.发送卖出订单(交易接口, 股票代码, 卖出价格, 交易数量, 大象信息)
        if not 卖出订单ID:
            交易结果["状态"] = "卖出失败"
            return 交易结果
        
        交易结果["卖出订单ID"] = 卖出订单ID
        交易结果["卖出状态"] = "已提交"
        
        # 等待卖出订单成交
        等待开始时间 = time.time()
        卖出成交 = False
        
        while time.time() - 等待开始时间 < self.等待时间:
            # 更新订单状态
            self.更新订单状态(交易接口)
            
            # 检查卖出订单是否成交
            if 卖出订单ID not in self.活跃订单:
                for 完成订单 in self.完成订单:
                    if 完成订单["订单ID"] == 卖出订单ID and 完成订单["状态"] == "已成交":
                        卖出成交 = True
                        交易结果["卖出状态"] = "已成交"
                        break
                
                if 卖出成交:
                    break
                else:
                    # 卖出订单可能被取消
                    交易结果["状态"] = "卖出未成交"
                    return 交易结果
            
            # 短暂休眠避免过于频繁查询
            time.sleep(0.5)
        
        if not 卖出成交:
            # 卖出超时，尝试取消
            self.取消订单(交易接口, 卖出订单ID)
            交易结果["状态"] = "卖出超时"
            return 交易结果
        
        # 计算买入价格
        买入价格 = self.计算买入价格(大象信息)
        交易结果["买入价格"] = 买入价格
        
        # 发送买入订单
        买入订单ID = self.发送买入订单(交易接口, 股票代码, 买入价格, 交易数量, 卖出订单ID, 大象信息)
        if not 买入订单ID:
            交易结果["状态"] = "买入失败"
            return 交易结果
        
        交易结果["买入订单ID"] = 买入订单ID
        交易结果["买入状态"] = "已提交"
        
        # 等待买入订单成交
        等待开始时间 = time.time()
        买入成交 = False
        
        while time.time() - 等待开始时间 < self.等待时间:
            # 更新订单状态
            self.更新订单状态(交易接口)
            
            # 检查买入订单是否成交
            if 买入订单ID not in self.活跃订单:
                for 完成订单 in self.完成订单:
                    if 完成订单["订单ID"] == 买入订单ID and 完成订单["状态"] == "已成交":
                        买入成交 = True
                        交易结果["买入状态"] = "已成交"
                        break
                
                if 买入成交:
                    break
                else:
                    # 买入订单可能被取消
                    交易结果["状态"] = "买入未成交"
                    return 交易结果
            
            # 短暂休眠避免过于频繁查询
            time.sleep(0.5)
        
        if not 买入成交:
            # 买入超时，记录状态
            交易结果["状态"] = "买入超时"
            return 交易结果
        
        # 计算交易利润
        for 订单 in self.完成订单:
            if 订单["订单ID"] == 卖出订单ID:
                卖出成交价 = 订单["成交价格"]
            elif 订单["订单ID"] == 买入订单ID:
                买入成交价 = 订单["成交价格"]
        
        利润 = (卖出成交价 - 买入成交价) * 交易数量
        交易结果["利润"] = 利润
        交易结果["状态"] = "完成"
        交易结果["结束时间"] = datetime.now()
        
        return 交易结果
    
    def 执行紧急止损(self, 交易接口, 股票代码: str, 价格: float, 数量: int) -> Dict:
        """
        执行紧急止损买入
        
        参数:
            交易接口: 交易接口对象
            股票代码: 股票代码
            价格: 买入价格
            数量: 买入数量
        
        返回:
            止损结果
        """
        止损结果 = {
            "股票代码": 股票代码,
            "价格": 价格,
            "数量": 数量,
            "订单ID": None,
            "状态": "开始",
            "时间": datetime.now()
        }
        
        # 发送市价买入订单
        try:
            订单ID = 交易接口.buy(股票代码, 价格, 数量)
            
            if 订单ID:
                止损结果["订单ID"] = 订单ID
                止损结果["状态"] = "已提交"
                
                # 记录订单信息
                当前时间 = datetime.now()
                订单信息 = {
                    "订单ID": 订单ID,
                    "股票代码": 股票代码,
                    "方向": "买入",
                    "价格": 价格,
                    "数量": 数量,
                    "状态": "已提交",
                    "提交时间": 当前时间,
                    "超时时间": 当前时间 + timedelta(seconds=self.等待时间),
                    "类型": "紧急止损"
                }
                
                self.活跃订单[订单ID] = 订单信息
                
                # 等待订单状态更新
                time.sleep(2)
                self.更新订单状态(交易接口)
                
                # 检查订单状态
                if 订单ID not in self.活跃订单:
                    for 完成订单 in self.完成订单:
                        if 完成订单["订单ID"] == 订单ID:
                            if 完成订单["状态"] == "已成交":
                                止损结果["状态"] = "已成交"
                            else:
                                止损结果["状态"] = 完成订单["状态"]
                            break
                
                return 止损结果
        except Exception as e:
            print(f"执行紧急止损错误: {e}")
            止损结果["状态"] = f"错误: {e}"
        
        return 止损结果
    
    def 清理过期数据(self):
        """清理过期数据，保持内存占用合理"""
        # 清理过期的冷却期记录
        当前时间 = datetime.now()
        要删除的股票 = []
        
        for 股票代码, 结束时间 in self.冷却期.items():
            if 当前时间 > 结束时间:
                要删除的股票.append(股票代码)
        
        for 股票代码 in 要删除的股票:
            del self.冷却期[股票代码]
        
        # 限制完成订单列表大小（保留最近1000条记录）
        if len(self.完成订单) > 1000:
            self.完成订单 = self.完成订单[-1000:] 