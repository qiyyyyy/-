#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
交易执行模块 - 负责发送和管理订单
"""
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import time


class 交易执行器:
    """交易执行器类，负责发送和管理订单"""
    
    def __init__(
        self,
        价格偏移量: float = 0.01,  # 1分钱
        卖出偏移量倍数: float = 2.0,  # 卖出价高于大象价格的偏移量倍数
        买入偏移量倍数: float = 1.0,  # 买入价高于大象价格的偏移量倍数
        等待时间: int = 30,  # 等待订单成交的最长时间(秒)
        冷却时间: int = 300,  # 同一股票交易后的冷却时间(秒)
        止损价格比例: float = 0.5  # 相对于大象价差的止损比例
    ):
        """
        初始化交易执行器
        
        参数:
            价格偏移量: 最小价格变动单位
            卖出偏移量倍数: 卖出价高于大象价格的偏移量倍数
            买入偏移量倍数: 买入价高于大象价格的偏移量倍数
            等待时间: 等待订单成交的最长时间(秒)
            冷却时间: 同一股票交易后的冷却时间(秒)
            止损价格比例: 相对于大象价差的止损比例
        """
        self.价格偏移量 = 价格偏移量
        self.卖出偏移量倍数 = 卖出偏移量倍数
        self.买入偏移量倍数 = 买入偏移量倍数
        self.等待时间 = 等待时间
        self.冷却时间 = 冷却时间
        self.止损价格比例 = 止损价格比例
        
        # 活跃订单管理 {订单ID: 订单信息}
        self.活跃订单 = {}
        
        # 完成订单记录 [{订单信息}]
        self.完成订单 = []
        
        # 交易冷却期 {股票代码: 结束时间}
        self.冷却期 = {}
        
        # 交易对 {卖出订单ID: 买入订单ID}
        self.交易对 = {}
    
    def 计算卖出价格(self, 大象信息: Dict) -> float:
        """
        计算卖出价格
        
        参数:
            大象信息: 大象信息
        
        返回:
            卖出价格
        """
        return 大象信息["价格"] + (self.价格偏移量 * self.卖出偏移量倍数)
    
    def 计算买入价格(self, 大象信息: Dict) -> float:
        """
        计算买入价格
        
        参数:
            大象信息: 大象信息
        
        返回:
            买入价格
        """
        return 大象信息["价格"] + (self.价格偏移量 * self.买入偏移量倍数)
    
    def 计算止损价格(self, 大象信息: Dict) -> float:
        """
        计算止损价格
        
        参数:
            大象信息: 大象信息
        
        返回:
            止损价格
        """
        价差 = 大象信息["价差"]
        return 大象信息["价格"] - (价差 * self.止损价格比例)
    
    def 发送卖出订单(self, 交易接口, 股票代码: str, 价格: float, 数量: int, 大象信息: Dict = None) -> str:
        """
        发送卖出订单
        
        参数:
            交易接口: 交易接口对象
            股票代码: 股票代码
            价格: 卖出价格
            数量: 卖出数量
            大象信息: 大象信息，用于记录相关数据
        
        返回:
            订单ID: 如果发送成功，返回订单ID；否则返回None
        """
        # 检查冷却期
        if not self.检查交易冷却期(股票代码):
            return None
        
        try:
            # 发送限价卖出订单
            订单ID = 交易接口.sell(股票代码, 价格, 数量)
            
            if 订单ID:
                # 记录订单信息
                当前时间 = datetime.now()
                订单信息 = {
                    "订单ID": 订单ID,
                    "股票代码": 股票代码,
                    "方向": "卖出",
                    "价格": 价格,
                    "数量": 数量,
                    "状态": "已提交",
                    "提交时间": 当前时间,
                    "超时时间": 当前时间 + timedelta(seconds=self.等待时间),
                    "大象信息": 大象信息
                }
                
                self.活跃订单[订单ID] = 订单信息
                
                # 设置冷却期
                self.设置交易冷却期(股票代码)
                
                return 订单ID
        except Exception as e:
            print(f"发送卖出订单错误: {e}")
        
        return None
    
    def 发送买入订单(self, 交易接口, 股票代码: str, 价格: float, 数量: int, 对应卖出订单ID: str = None, 大象信息: Dict = None) -> str:
        """
        发送买入订单
        
        参数:
            交易接口: 交易接口对象
            股票代码: 股票代码
            价格: 买入价格
            数量: 买入数量
            对应卖出订单ID: 对应的卖出订单ID，用于关联交易对
            大象信息: 大象信息，用于记录相关数据
        
        返回:
            订单ID: 如果发送成功，返回订单ID；否则返回None
        """
        try:
            # 发送限价买入订单
            订单ID = 交易接口.buy(股票代码, 价格, 数量)
            
            if 订单ID:
                # 记录订单信息
                当前时间 = datetime.now()
                订单信息 = {
                    "订单ID": 订单ID,
                    "股票代码": 股票代码,
                    "方向": "买入",
                    "价格": 价格,
                    "数量": 数量,
                    "状态": "已提交",
                    "提交时间": 当前时间,
                    "超时时间": 当前时间 + timedelta(seconds=self.等待时间),
                    "大象信息": 大象信息
                }
                
                self.活跃订单[订单ID] = 订单信息
                
                # 关联交易对
                if 对应卖出订单ID:
                    self.交易对[对应卖出订单ID] = 订单ID
                
                return 订单ID
        except Exception as e:
            print(f"发送买入订单错误: {e}")
        
        return None
    
    def 取消订单(self, 交易接口, 订单ID: str) -> bool:
        """
        取消订单
        
        参数:
            交易接口: 交易接口对象
            订单ID: 要取消的订单ID
        
        返回:
            是否成功: 如果取消成功，返回True；否则返回False
        """
        if 订单ID not in self.活跃订单:
            return False
        
        try:
            # 发送取消订单请求
            结果 = 交易接口.cancel_order(订单ID)
            
            if 结果:
                # 更新订单状态
                self.活跃订单[订单ID]["状态"] = "已取消"
                
                # 移动到完成订单列表
                self.完成订单.append(self.活跃订单[订单ID])
                del self.活跃订单[订单ID]
                
                return True
        except Exception as e:
            print(f"取消订单错误: {e}")
        
        return False
    
    def 更新订单状态(self, 交易接口):
        """
        更新所有活跃订单的状态
        
        参数:
            交易接口: 交易接口对象
        """
        当前时间 = datetime.now()
        要删除的订单IDs = []
        
        for 订单ID, 订单信息 in self.活跃订单.items():
            try:
                # 查询订单状态
                订单状态 = 交易接口.get_order(订单ID)
                
                if 订单状态["status"] == "FILLED":
                    # 订单已成交
                    订单信息["状态"] = "已成交"
                    订单信息["成交时间"] = 当前时间
                    订单信息["成交价格"] = 订单状态["price"]
                    订单信息["成交数量"] = 订单状态["filled"]
                    
                    # 移动到完成订单列表
                    self.完成订单.append(订单信息.copy())
                    要删除的订单IDs.append(订单ID)
                elif 订单状态["status"] == "CANCELED":
                    # 订单已取消
                    订单信息["状态"] = "已取消"
                    
                    # 移动到完成订单列表
                    self.完成订单.append(订单信息.copy())
                    要删除的订单IDs.append(订单ID)
                elif 当前时间 > 订单信息["超时时间"]:
                    # 订单超时，尝试取消
                    self.取消订单(交易接口, 订单ID)
            except Exception as e:
                print(f"更新订单状态错误: {e}")
        
        # 清理已完成的订单
        for 订单ID in 要删除的订单IDs:
            if 订单ID in self.活跃订单:
                del self.活跃订单[订单ID]
    
    def 设置交易冷却期(self, 股票代码: str, 延长系数: float = 1.0):
        """
        设置股票的交易冷却期，可选择延长或缩短冷却时间
        
        参数:
            股票代码: 股票代码
            延长系数: 冷却时间的延长系数，1.0表示标准冷却时间
        """
        冷却时间 = int(self.冷却时间 * 延长系数)
        结束时间 = datetime.now() + timedelta(seconds=冷却时间)
        self.冷却期[股票代码] = 结束时间
        print(f"设置 {股票代码} 冷却期至 {结束时间.strftime('%H:%M:%S')}，系数: {延长系数}")
    
    def 检查交易冷却期(self, 股票代码: str) -> bool:
        """
        检查股票是否在交易冷却期内
        
        参数:
            股票代码: 股票代码
        
        返回:
            是否可交易: 如果不在冷却期内，返回True；否则返回False
        """
        if 股票代码 not in self.冷却期:
            return True
        
        当前时间 = datetime.now()
        return 当前时间 > self.冷却期[股票代码]
    
    def 执行高频交易(self, 交易接口, 股票代码: str, 大象信息: Dict, 交易数量: int) -> Dict:
        """
        执行完整的高频交易操作（先卖后买）
        
        参数:
            交易接口: 交易接口对象
            股票代码: 股票代码
            大象信息: 大象信息
            交易数量: 交易数量
        
        返回:
            交易结果: 包含交易详情的字典
        """
        交易结果 = {
            "股票代码": 股票代码,
            "大象价格": 大象信息["价格"],
            "交易数量": 交易数量,
            "卖出订单ID": None,
            "买入订单ID": None,
            "卖出价格": 0,
            "买入价格": 0,
            "卖出状态": "未执行",
            "买入状态": "未执行",
            "利润": 0,
            "状态": "开始",
            "开始时间": datetime.now()
        }
        
        # 计算卖出价格
        卖出价格 = self.计算卖出价格(大象信息)
        交易结果["卖出价格"] = 卖出价格
        
        # 发送卖出订单
        卖出订单ID = self.发送卖出订单(交易接口, 股票代码, 卖出价格, 交易数量, 大象信息)
        if not 卖出订单ID:
            交易结果["状态"] = "卖出失败"
            return 交易结果
        
        交易结果["卖出订单ID"] = 卖出订单ID
        交易结果["卖出状态"] = "已提交"
        
        # 等待卖出订单成交
        等待开始时间 = time.time()
        卖出成交 = False
        
        while time.time() - 等待开始时间 < self.等待时间:
            # 更新订单状态
            self.更新订单状态(交易接口)
            
            # 检查卖出订单是否成交
            if 卖出订单ID not in self.活跃订单:
                for 完成订单 in self.完成订单:
                    if 完成订单["订单ID"] == 卖出订单ID and 完成订单["状态"] == "已成交":
                        卖出成交 = True
                        交易结果["卖出状态"] = "已成交"
                        break
                
                if 卖出成交:
                    break
                else:
                    # 卖出订单可能被取消
                    交易结果["状态"] = "卖出未成交"
                    return 交易结果
            
            # 短暂休眠避免过于频繁查询
            time.sleep(0.5)
        
        if not 卖出成交:
            # 卖出超时，尝试取消
            self.取消订单(交易接口, 卖出订单ID)
            交易结果["状态"] = "卖出超时"
            return 交易结果
        
        # 计算买入价格
        买入价格 = self.计算买入价格(大象信息)
        交易结果["买入价格"] = 买入价格
        
        # 发送买入订单
        买入订单ID = self.发送买入订单(交易接口, 股票代码, 买入价格, 交易数量, 卖出订单ID, 大象信息)
        if not 买入订单ID:
            交易结果["状态"] = "买入失败"
            return 交易结果
        
        交易结果["买入订单ID"] = 买入订单ID
        交易结果["买入状态"] = "已提交"
        
        # 等待买入订单成交
        等待开始时间 = time.time()
        买入成交 = False
        
        while time.time() - 等待开始时间 < self.等待时间:
            # 更新订单状态
            self.更新订单状态(交易接口)
            
            # 检查买入订单是否成交
            if 买入订单ID not in self.活跃订单:
                for 完成订单 in self.完成订单:
                    if 完成订单["订单ID"] == 买入订单ID and 完成订单["状态"] == "已成交":
                        买入成交 = True
                        交易结果["买入状态"] = "已成交"
                        break
                
                if 买入成交:
                    break
                else:
                    # 买入订单可能被取消
                    交易结果["状态"] = "买入未成交"
                    return 交易结果
            
            # 短暂休眠避免过于频繁查询
            time.sleep(0.5)
        
        if not 买入成交:
            # 买入超时，记录状态
            交易结果["状态"] = "买入超时"
            return 交易结果
        
        # 计算交易利润
        for 订单 in self.完成订单:
            if 订单["订单ID"] == 卖出订单ID:
                卖出成交价 = 订单["成交价格"]
            elif 订单["订单ID"] == 买入订单ID:
                买入成交价 = 订单["成交价格"]
        
        利润 = (卖出成交价 - 买入成交价) * 交易数量
        交易结果["利润"] = 利润
        交易结果["状态"] = "完成"
        交易结果["结束时间"] = datetime.now()
        
        return 交易结果
    
    def 执行紧急止损(self, 交易接口, 股票代码: str, 价格: float, 数量: int) -> Dict:
        """
        执行紧急止损买入
        
        参数:
            交易接口: 交易接口对象
            股票代码: 股票代码
            价格: 买入价格
            数量: 买入数量
        
        返回:
            止损结果
        """
        止损结果 = {
            "股票代码": 股票代码,
            "价格": 价格,
            "数量": 数量,
            "订单ID": None,
            "状态": "开始",
            "时间": datetime.now()
        }
        
        # 发送市价买入订单
        try:
            订单ID = 交易接口.buy(股票代码, 价格, 数量)
            
            if 订单ID:
                止损结果["订单ID"] = 订单ID
                止损结果["状态"] = "已提交"
                
                # 记录订单信息
                当前时间 = datetime.now()
                订单信息 = {
                    "订单ID": 订单ID,
                    "股票代码": 股票代码,
                    "方向": "买入",
                    "价格": 价格,
                    "数量": 数量,
                    "状态": "已提交",
                    "提交时间": 当前时间,
                    "超时时间": 当前时间 + timedelta(seconds=self.等待时间),
                    "类型": "紧急止损"
                }
                
                self.活跃订单[订单ID] = 订单信息
                
                # 等待订单状态更新
                time.sleep(2)
                self.更新订单状态(交易接口)
                
                # 检查订单状态
                if 订单ID not in self.活跃订单:
                    for 完成订单 in self.完成订单:
                        if 完成订单["订单ID"] == 订单ID:
                            if 完成订单["状态"] == "已成交":
                                止损结果["状态"] = "已成交"
                            else:
                                止损结果["状态"] = 完成订单["状态"]
                            break
                
                return 止损结果
        except Exception as e:
            print(f"执行紧急止损错误: {e}")
            止损结果["状态"] = f"错误: {e}"
        
        return 止损结果
    
    def 清理过期数据(self):
        """清理过期数据，保持内存占用合理"""
        # 清理过期的冷却期记录
        当前时间 = datetime.now()
        要删除的股票 = []
        
        for 股票代码, 结束时间 in self.冷却期.items():
            if 当前时间 > 结束时间:
                要删除的股票.append(股票代码)
        
        for 股票代码 in 要删除的股票:
            del self.冷却期[股票代码]
        
        # 限制完成订单列表大小（保留最近1000条记录）
        if len(self.完成订单) > 1000:
            self.完成订单 = self.完成订单[-1000:]
    
    # ===== 自适应撤单机制 =====
    
    def 撤单处理(self, 交易接口, 订单ID: str, 原因: str = "") -> bool:
        """
        撤销指定订单，增强版的取消订单方法
        
        参数:
            交易接口: 交易接口对象
            订单ID: 需要撤销的订单ID
            原因: 撤单原因，用于日志记录
        
        返回:
            bool: 撤单请求是否成功发送
        """
        # 检查订单是否存在且未完全成交
        if 订单ID not in self.活跃订单:
            print(f"撤单失败：订单 {订单ID} 不存在或已成交")
            return False
            
        # 记录原始状态和撤单原因
        self.活跃订单[订单ID]["撤单原因"] = 原因
        self.活跃订单[订单ID]["撤单请求时间"] = datetime.now()
        
        # 发送撤单请求
        结果 = self.取消订单(交易接口, 订单ID)
        
        # 记录撤单事件
        print(f"发送撤单请求：订单 {订单ID}，原因：{原因}，结果：{'成功' if 结果 else '失败'}")
        
        return 结果
    
    def 检查价格偏离撤单(self, 交易接口, 市场价格数据, 价格偏离阈值: float = 0.003) -> List[str]:
        """
        检查并撤销因价格偏离而需要撤单的订单
        
        参数:
            交易接口: 交易接口对象
            市场价格数据: 当前市场价格数据 {股票代码: 价格}
            价格偏离阈值: 价格偏离触发撤单的阈值，默认0.3%
        
        返回:
            List[str]: 已发送撤单请求的订单ID列表
        """
        已撤销订单IDs = []
        
        for 订单ID, 订单信息 in list(self.活跃订单.items()):
            股票代码 = 订单信息["股票代码"]
            订单价格 = 订单信息["价格"]
            
            # 检查是否有该股票的市场价格数据
            if 股票代码 not in 市场价格数据:
                continue
                
            当前价格 = 市场价格数据[股票代码]
            
            # 计算价格偏离比例
            if 订单信息["方向"] == "买入":
                # 买入订单：如果市场价格下跌超过阈值，应该考虑撤单重下更低价格
                偏离比例 = (订单价格 - 当前价格) / 订单价格
                if 偏离比例 > 价格偏离阈值:
                    if self.撤单处理(交易接口, 订单ID, f"买入价格偏离: {偏离比例:.2%}"):
                        已撤销订单IDs.append(订单ID)
            else:  # 卖出订单
                # 卖出订单：如果市场价格上涨超过阈值，应该考虑撤单重下更高价格
                偏离比例 = (当前价格 - 订单价格) / 订单价格
                if 偏离比例 > 价格偏离阈值:
                    if self.撤单处理(交易接口, 订单ID, f"卖出价格偏离: {偏离比例:.2%}"):
                        已撤销订单IDs.append(订单ID)
        
        return 已撤销订单IDs
    
    def 检查大象信号消失撤单(self, 交易接口, 大象信号: Dict, 信号阈值: float = 0.5) -> List[str]:
        """
        检查并撤销因大象信号消失而需要撤单的订单
        
        参数:
            交易接口: 交易接口对象
            大象信号: 当前大象信号状态 {股票代码: 信号强度}
            信号阈值: 信号强度低于此阈值视为消失
        
        返回:
            List[str]: 已发送撤单请求的订单ID列表
        """
        已撤销订单IDs = []
        
        for 订单ID, 订单信息 in list(self.活跃订单.items()):
            # 检查订单是否包含大象信息
            if "大象信息" not in 订单信息 or not 订单信息["大象信息"]:
                continue
                
            股票代码 = 订单信息["股票代码"]
            原信号强度 = 订单信息["大象信息"].get("信号强度", 1.0)
            
            # 检查当前信号状态
            当前信号强度 = 大象信号.get(股票代码, 0)
            
            # 如果信号强度下降超过阈值，则撤单
            if 当前信号强度 < 原信号强度 * 信号阈值:
                if self.撤单处理(交易接口, 订单ID, f"大象信号减弱: {当前信号强度:.2f}/{原信号强度:.2f}"):
                    已撤销订单IDs.append(订单ID)
        
        return 已撤销订单IDs
    
    def 检查风控触发撤单(self, 交易接口, 风控状态: Dict) -> List[str]:
        """
        检查并撤销因风控触发而需要撤单的订单
        
        参数:
            交易接口: 交易接口对象
            风控状态: 当前风控状态，包含各种风控条件和触发状态
        
        返回:
            List[str]: 已发送撤单请求的订单ID列表
        """
        已撤销订单IDs = []
        
        # 检查全局风控状态
        if 风控状态.get("全局风控触发", False):
            # 全局风控触发，撤销所有活跃订单
            for 订单ID in list(self.活跃订单.keys()):
                if self.撤单处理(交易接口, 订单ID, "全局风控触发"):
                    已撤销订单IDs.append(订单ID)
            return 已撤销订单IDs
            
        # 检查单股风控状态
        股票风控状态 = 风控状态.get("股票风控状态", {})
        for 订单ID, 订单信息 in list(self.活跃订单.items()):
            股票代码 = 订单信息["股票代码"]
            
            # 检查该股票是否触发风控
            if 股票代码 in 股票风控状态 and 股票风控状态[股票代码].get("触发", False):
                if self.撤单处理(交易接口, 订单ID, f"单股风控触发: {股票代码}"):
                    已撤销订单IDs.append(订单ID)
                    
        # 检查流动性风控
        流动性不足股票 = 风控状态.get("流动性不足股票", [])
        for 订单ID, 订单信息 in list(self.活跃订单.items()):
            股票代码 = 订单信息["股票代码"]
            
            if 股票代码 in 流动性不足股票:
                if self.撤单处理(交易接口, 订单ID, f"流动性不足: {股票代码}"):
                    已撤销订单IDs.append(订单ID)
        
        return 已撤销订单IDs
    
    def 盘前撤单(self, 交易接口, 分钟数: int = 5) -> List[str]:
        """
        交易时段结束前一定时间撤销所有未成交订单
        
        参数:
            交易接口: 交易接口对象
            分钟数: 交易时段结束前多少分钟撤单
            
        返回:
            List[str]: 已发送撤单请求的订单ID列表
        """
        已撤销订单IDs = []
        
        # 获取当前时间
        当前时间 = datetime.now()
        上午结束时间 = datetime(当前时间.year, 当前时间.month, 当前时间.day, 11, 30)
        下午结束时间 = datetime(当前时间.year, 当前时间.month, 当前时间.day, 15, 0)
        
        # 检查是否接近交易时段结束
        上午结束前 = 上午结束时间 - timedelta(minutes=分钟数) <= 当前时间 < 上午结束时间
        下午结束前 = 下午结束时间 - timedelta(minutes=分钟数) <= 当前时间 < 下午结束时间
        
        if 上午结束前 or 下午结束前:
            时段名 = "上午" if 上午结束前 else "下午"
            # 撤销所有活跃订单
            for 订单ID in list(self.活跃订单.keys()):
                if self.撤单处理(交易接口, 订单ID, f"{时段名}交易时段结束前撤单"):
                    已撤销订单IDs.append(订单ID)
        
        return 已撤销订单IDs
    
    def 撤单后处理(self, 交易接口, 已撤销订单IDs: List[str]) -> Dict:
        """
        处理撤单后的操作，如价格调整重试、记录统计信息等
        
        参数:
            交易接口: 交易接口对象
            已撤销订单IDs: 已撤销的订单ID列表
            
        返回:
            Dict: 处理结果统计
        """
        处理结果 = {
            "总撤单数": len(已撤销订单IDs),
            "重新下单数": 0,
            "重新下单IDs": [],
            "冷却处理数": 0,
            "释放资金": 0.0
        }
        
        if not 已撤销订单IDs:
            return 处理结果
            
        # 查找已撤销订单的信息
        for 订单ID in 已撤销订单IDs:
            # 订单可能已经从活跃订单移动到完成订单
            订单信息 = None
            for 完成订单 in self.完成订单:
                if 完成订单["订单ID"] == 订单ID:
                    订单信息 = 完成订单
                    break
                    
            if not 订单信息:
                continue
                
            撤单原因 = 订单信息.get("撤单原因", "")
            股票代码 = 订单信息["股票代码"]
            价格 = 订单信息["价格"]
            数量 = 订单信息["数量"]
            方向 = 订单信息["方向"]
            大象信息 = 订单信息.get("大象信息")
            
            # 根据不同的撤单原因处理
            if "价格偏离" in 撤单原因:
                # 价格偏离撤单：考虑调整价格重新下单
                if 方向 == "买入" and "重新下单" not in 撤单原因:
                    # 下调买入价格并重新下单
                    新价格 = 价格 * 0.995  # 下调0.5%
                    新订单ID = self.发送买入订单(交易接口, 股票代码, 新价格, 数量, None, 大象信息)
                    if 新订单ID:
                        处理结果["重新下单数"] += 1
                        处理结果["重新下单IDs"].append(新订单ID)
                        # 标记这是重新下单
                        self.活跃订单[新订单ID]["原订单ID"] = 订单ID
                        self.活跃订单[新订单ID]["撤单后重新下单"] = True
                
                elif 方向 == "卖出" and "重新下单" not in 撤单原因:
                    # 上调卖出价格并重新下单
                    新价格 = 价格 * 1.005  # 上调0.5%
                    新订单ID = self.发送卖出订单(交易接口, 股票代码, 新价格, 数量, 大象信息)
                    if 新订单ID:
                        处理结果["重新下单数"] += 1
                        处理结果["重新下单IDs"].append(新订单ID)
                        # 标记这是重新下单
                        self.活跃订单[新订单ID]["原订单ID"] = 订单ID
                        self.活跃订单[新订单ID]["撤单后重新下单"] = True
            
            elif "大象信号" in 撤单原因:
                # 大象信号消失：设置短暂交易冷却期
                self.设置交易冷却期(股票代码, 延长系数=0.5)  # 设置一个较短的冷却期
                处理结果["冷却处理数"] += 1
            
            elif "风控触发" in 撤单原因 or "流动性不足" in 撤单原因:
                # 风控触发或流动性不足：暂不重新下单，释放资金
                处理结果["释放资金"] += 价格 * 数量
            
            # 记录撤单统计
            self._更新撤单统计(订单信息)
        
        return 处理结果
    
    # 撤单统计数据
    def _初始化撤单统计(self):
        """初始化撤单统计数据结构"""
        self.撤单统计 = {
            "总撤单次数": 0,
            "各原因撤单次数": {},
            "各股票撤单次数": {},
            "时间分布": {
                "9:30-10:00": 0,
                "10:00-11:30": 0,
                "13:00-14:00": 0,
                "14:00-15:00": 0
            },
            "重新下单成功率": {
                "尝试次数": 0,
                "成功次数": 0
            }
        }
    
    def _更新撤单统计(self, 订单信息: Dict):
        """
        更新撤单统计数据
        
        参数:
            订单信息: 订单信息字典
        """
        # 确保统计数据结构已初始化
        if not hasattr(self, "撤单统计"):
            self._初始化撤单统计()
            
        # 更新总撤单次数
        self.撤单统计["总撤单次数"] += 1
        
        # 更新原因统计
        撤单原因 = 订单信息.get("撤单原因", "未知原因")
        self.撤单统计["各原因撤单次数"][撤单原因] = self.撤单统计["各原因撤单次数"].get(撤单原因, 0) + 1
        
        # 更新股票统计
        股票代码 = 订单信息["股票代码"]
        self.撤单统计["各股票撤单次数"][股票代码] = self.撤单统计["各股票撤单次数"].get(股票代码, 0) + 1
        
        # 更新时间分布
        撤单时间 = 订单信息.get("撤单请求时间", datetime.now())
        小时 = 撤单时间.hour
        分钟 = 撤单时间.minute
        
        if 小时 == 9 and 分钟 >= 30 or 小时 == 10 and 分钟 < 0:
            时间段 = "9:30-10:00"
        elif (小时 == 10 and 分钟 >= 0) or 小时 == 11:
            时间段 = "10:00-11:30"
        elif 小时 == 13:
            时间段 = "13:00-14:00"
        elif 小时 == 14:
            时间段 = "14:00-15:00"
        else:
            时间段 = "其他时间"
            
        if 时间段 != "其他时间":
            self.撤单统计["时间分布"][时间段] = self.撤单统计["时间分布"].get(时间段, 0) + 1
    
    def 获取撤单统计(self) -> Dict:
        """
        获取撤单统计数据
        
        返回:
            Dict: 撤单统计数据
        """
        if not hasattr(self, "撤单统计"):
            self._初始化撤单统计()
            
        # 计算重新下单成功率
        尝试次数 = self.撤单统计["重新下单成功率"]["尝试次数"]
        成功次数 = self.撤单统计["重新下单成功率"]["成功次数"]
        成功率 = 成功次数 / 尝试次数 if 尝试次数 > 0 else 0
        
        # 添加成功率百分比
        结果 = self.撤单统计.copy()
        结果["重新下单成功率"]["成功率"] = f"{成功率:.2%}"
        
        return 结果
        
    def 更新撤单状态(self, 交易接口, 市场数据: Dict = None, 大象信号: Dict = None, 风控状态: Dict = None):
        """
        综合检查并处理需要撤单的订单，集成多种撤单机制
        
        参数:
            交易接口: 交易接口对象
            市场数据: 市场数据，包含当前价格等信息
            大象信号: 大象信号状态
            风控状态: 风控状态
            
        返回:
            Dict: 撤单处理结果
        """
        已撤销订单IDs = []
        
        # 1. 检查超时订单(已在更新订单状态中处理)
        self.更新订单状态(交易接口)
        
        # 2. 检查价格偏离撤单
        if 市场数据:
            价格撤单IDs = self.检查价格偏离撤单(交易接口, 市场数据)
            已撤销订单IDs.extend(价格撤单IDs)
        
        # 3. 检查大象信号消失撤单
        if 大象信号:
            信号撤单IDs = self.检查大象信号消失撤单(交易接口, 大象信号)
            已撤销订单IDs.extend(信号撤单IDs)
        
        # 4. 检查风控触发撤单
        if 风控状态:
            风控撤单IDs = self.检查风控触发撤单(交易接口, 风控状态)
            已撤销订单IDs.extend(风控撤单IDs)
        
        # 5. 检查盘前撤单
        盘前撤单IDs = self.盘前撤单(交易接口)
        已撤销订单IDs.extend(盘前撤单IDs)
        
        # 对已撤销订单进行后续处理
        处理结果 = self.撤单后处理(交易接口, 已撤销订单IDs)
        
        return {
            "撤销订单数": len(已撤销订单IDs),
            "撤销订单IDs": 已撤销订单IDs,
            "后续处理结果": 处理结果
        } 